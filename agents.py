"""
AI Agents module for Social Media AI Agent
Integrates with Google Gemini API for real content generation
"""

import time
import random
import requests
import json
import os
from typing import Dict, List, Optional, Any
from datetime import datetime
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class GeminiLlmAgent:
    """
    Real LLM Agent using Google Gemini API
    """
    
    def __init__(self, name: str, model: str, description: str, instruction: str, 
                 tools: List = None, sub_agents: List = None):
        self.name = name
        self.model = model or "gemini-1.5-flash"
        self.description = description
        self.instruction = instruction
        self.tools = tools or []
        self.sub_agents = sub_agents or []
        self.api_key = os.getenv('GOOGLE_API_KEY')
        
    def run(self, prompt: str) -> str:
        """Run the agent using Google Gemini API"""
        if not self.api_key:
            return self._fallback_response(prompt)
        
        try:
            return self._call_gemini_api(prompt)
        except Exception as e:
            logger.error(f"Gemini API call failed: {str(e)}")
            return self._fallback_response(prompt)
    
    def _call_gemini_api(self, prompt: str) -> str:
        """Call Google Gemini API"""
        
        # Construct the full prompt with agent instructions
        full_prompt = f"""You are {self.name}, a specialized AI agent for social media content creation.

Your role: {self.description}

Instructions: {self.instruction}

User Request:
{prompt}

Please generate comprehensive social media content that directly addresses the user's specific topic, platform, and tone requirements. Make sure the content is original, engaging, and optimized for the specified platform.

Format your response as:
## 📊 CONTENT PACKAGE SUMMARY
- **Topic**: [extracted topic]
- **Platform**: [extracted platform] 
- **Strategy**: [brief strategy description]

## 📝 CONTENT
[Main social media post content - ready to copy and paste]

## 🏷️ HASHTAG STRATEGY
[Relevant hashtags with explanations]

## 🎨 VISUAL CONCEPTS
[Creative visual suggestions]

## 📈 PERFORMANCE INSIGHTS
[Expected performance and optimization tips]

## 🔥 TRENDING ELEMENTS
[Current trends related to the topic]
"""

        # Gemini API endpoint
        url = f"https://generativelanguage.googleapis.com/v1beta/models/{self.model}:generateContent?key={self.api_key}"
        
        headers = {
            "Content-Type": "application/json"
        }
        
        data = {
            "contents": [{
                "parts": [{
                    "text": full_prompt
                }]
            }],
            "generationConfig": {
                "temperature": 0.7,
                "topK": 40,
                "topP": 0.95,
                "maxOutputTokens": 2048
            },
            "safetySettings": [
                {
                    "category": "HARM_CATEGORY_HARASSMENT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_HATE_SPEECH", 
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                }
            ]
        }
        
        response = requests.post(url, headers=headers, json=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            if 'candidates' in result and len(result['candidates']) > 0:
                content = result['candidates'][0]['content']['parts'][0]['text']
                return content
            else:
                raise Exception("No content generated by Gemini")
        else:
            error_msg = f"API call failed with status {response.status_code}: {response.text}"
            raise Exception(error_msg)
    
    def _fallback_response(self, prompt: str) -> str:
        """Fallback response when API is not available"""
        return f"""## 📊 CONTENT PACKAGE SUMMARY
- **Topic**: Content generation temporarily unavailable
- **Platform**: General
- **Strategy**: Using fallback response

## 📝 CONTENT
I apologize, but I'm currently unable to generate custom content using the Gemini API. This could be due to:

• Missing or invalid Google API key
• API quota exceeded
• Network connectivity issues
• API service temporary unavailability

To fix this:
1. Check that your GOOGLE_API_KEY is set in the .env file
2. Ensure your Google Cloud project has the Generative AI API enabled
3. Verify your API key has the necessary permissions
4. Check your API usage quotas in Google Cloud Console

## 🏷️ HASHTAG STRATEGY
#ContentCreation #SocialMedia #TechIssues #APIError

## 🎨 VISUAL CONCEPTS
Consider using error-friendly visuals that communicate technical difficulties in a user-friendly way.

## 📈 PERFORMANCE INSIGHTS
Fix the API connection to enable full content generation capabilities.

## 🔥 TRENDING ELEMENTS
API troubleshooting and backup content strategies are always relevant for content creators.

Debug info: Attempted to process prompt: "{prompt[:100]}..."
"""

class AgentManager:
    """
    Manages all AI agents in the social media content creation system
    """
    
    def __init__(self):
        self.agents: Dict[str, GeminiLlmAgent] = {}
        self._initialize_agents()
    
    def _initialize_agents(self) -> None:
        """Initialize all specialized agents"""
        try:
            logger.info("Initializing Gemini-powered AI agents...")
            
            # Initialize individual agents with specific instructions
            self.agents["trend_finder"] = GeminiLlmAgent(
                name="Trend Finder Agent",
                model="gemini-1.5-flash",
                description="Discovers trending hashtags, topics, and current social media trends",
                instruction="""You are a social media trend expert. Analyze the given topic and provide:
1. Current trending hashtags related to the topic (research real trends)
2. Popular themes and conversations happening now
3. Audience engagement patterns and behaviors
4. Platform-specific trending elements
5. Seasonal and timely trend opportunities

Always provide specific, actionable hashtag recommendations with explanations of why they're effective."""
            )
            
            self.agents["content_writer"] = GeminiLlmAgent(
                name="Content Writer Agent", 
                model="gemini-1.5-flash",
                description="Creates engaging, platform-optimized social media content",
                instruction="""You are an expert social media content writer. Create compelling posts that:
1. Capture attention with strong, relevant hooks
2. Provide genuine value to the audience
3. Match the specified platform's format and best practices
4. Use the appropriate tone and voice
5. Include clear calls-to-action that drive engagement
6. Are optimized for the target platform's algorithm

Always create original, authentic content that resonates with the target audience."""
            )
            
            self.agents["visual_concept"] = GeminiLlmAgent(
                name="Visual Concept Agent",
                model="gemini-1.5-flash",
                description="Suggests creative visual concepts and design ideas for social media",
                instruction="""You are a creative visual strategist. Provide detailed visual concepts including:
1. Specific visual style and aesthetic recommendations
2. Color palettes that enhance the message and brand
3. Composition and layout suggestions
4. Props, backgrounds, and visual elements
5. Mood and emotional tone of visuals
6. Platform-specific visual requirements and dimensions

Focus on practical, achievable visual concepts that non-designers can execute."""
            )
            
            self.agents["analytics"] = GeminiLlmAgent(
                name="Analytics Agent",
                model="gemini-1.5-flash",
                description="Provides performance insights and social media analytics",
                instruction="""You are a social media analytics expert. Provide:
1. Performance predictions based on content type and platform
2. Specific optimization recommendations
3. Audience behavior insights and demographics
4. Optimal posting times and frequency strategies
5. Engagement metrics expectations
6. Competitive analysis and benchmarking insights

Base all recommendations on current social media best practices and platform algorithms."""
            )
            
            self.agents["hashtag_specialist"] = GeminiLlmAgent(
                name="Hashtag Specialist Agent",
                model="gemini-1.5-flash",
                description="Specializes in hashtag research, strategy, and optimization",
                instruction="""You are a hashtag strategy expert. Create comprehensive hashtag strategies with:
1. Primary hashtags (high-traffic, relevant tags)
2. Niche hashtags (specific, targeted tags)
3. Community hashtags (audience-building tags)
4. Trending hashtags (current viral or seasonal tags)
5. Platform-specific hashtag strategies
6. Performance rationale for each hashtag selection

Provide practical hashtag mixes that balance reach and engagement."""
            )
            
            # Initialize coordinator with sub-agents
            sub_agents = [
                self.agents["trend_finder"],
                self.agents["content_writer"], 
                self.agents["visual_concept"],
                self.agents["analytics"],
                self.agents["hashtag_specialist"]
            ]
            
            self.agents["coordinator"] = GeminiLlmAgent(
                name="Social Media Coordinator",
                model="gemini-1.5-flash",  # Changed to free model
                description="Coordinates social media content creation using specialized expertise",
                instruction="""You are the Social Media Genius, an expert coordinator for comprehensive social media content creation.

Your role is to create complete, professional social media content packages by combining:
- Trend analysis and hashtag research
- Engaging, platform-optimized content writing  
- Creative visual concept development
- Performance analytics and optimization insights
- Strategic social media expertise

When given a topic, platform, and tone:
1. Analyze the request thoroughly
2. Generate authentic, engaging content optimized for the specific platform
3. Provide relevant, trending hashtags with strategic reasoning
4. Suggest practical visual concepts that enhance the content
5. Include performance insights and optimization recommendations
6. Ensure all content is cohesive and professional

Always create original content that matches the user's specific requirements. Never use generic templates - make each response unique and valuable."""
            )
            
            logger.info(f"Successfully initialized {len(self.agents)} Gemini-powered agents")
            
        except Exception as e:
            logger.error(f"Error initializing agents: {str(e)}")
            raise
    
    def get_agent(self, agent_name: str) -> Optional[GeminiLlmAgent]:
        """Get a specific agent by name"""
        return self.agents.get(agent_name)
    
    def get_coordinator(self) -> Optional[GeminiLlmAgent]:
        """Get the main coordinator agent"""
        return self.agents.get("coordinator")
    
    def list_agents(self) -> List[str]:
        """List all available agents"""
        return list(self.agents.keys())
    
    def get_agent_info(self) -> Dict[str, Dict[str, Any]]:
        """Get information about all agents"""
        info = {}
        for name, agent in self.agents.items():
            info[name] = {
                "name": agent.name,
                "description": agent.description, 
                "model": agent.model,
                "has_tools": len(agent.tools) > 0,
                "has_sub_agents": len(agent.sub_agents) > 0,
                "api_available": bool(agent.api_key)
            }
        return info
    
    def validate_agents(self) -> Dict[str, bool]:
        """Validate that all agents are properly initialized"""
        validation = {}
        for name, agent in self.agents.items():
            try:
                validation[name] = (
                    agent is not None and
                    hasattr(agent, 'name') and
                    hasattr(agent, 'model') and 
                    hasattr(agent, 'description') and
                    hasattr(agent, 'api_key')
                )
            except Exception as e:
                logger.error(f"Validation error for agent {name}: {str(e)}")
                validation[name] = False
        
        return validation
    
    def test_api_connection(self) -> Dict[str, Any]:
        """Test the Gemini API connection"""
        api_key = os.getenv('GOOGLE_API_KEY')
        
        if not api_key:
            return {
                "status": "error",
                "message": "No API key found. Please set GOOGLE_API_KEY in your .env file."
            }
        
        try:
            # Test with a simple request
            test_agent = GeminiLlmAgent(
                name="Test Agent",
                model="gemini-1.5-flash", 
                description="Test agent",
                instruction="You are a test agent. Respond with 'API connection successful!' if you receive this message."
            )
            
            response = test_agent.run("Test API connection")
            
            if "API connection successful!" in response or len(response) > 10:
                return {
                    "status": "success",
                    "message": "Gemini API connection is working correctly.",
                    "model": "gemini-1.5-flash"
                }
            else:
                return {
                    "status": "warning", 
                    "message": "API responded but with unexpected content.",
                    "response": response[:200]
                }
                
        except Exception as e:
            return {
                "status": "error",
                "message": f"API connection failed: {str(e)}",
                "suggestion": "Check your API key, internet connection, and Google Cloud project settings."
            }

# Global agent manager instance
agent_manager = None

def get_agent_manager() -> AgentManager:
    """Get or create the global agent manager instance"""
    global agent_manager
    if agent_manager is None:
        agent_manager = AgentManager()
    return agent_manager

def initialize_agents() -> AgentManager:
    """Initialize and return the agent manager"""
    return get_agent_manager()

def test_gemini_connection() -> Dict[str, Any]:
    """Test Gemini API connection"""
    manager = get_agent_manager()
    return manager.test_api_connection()